-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Main where

import DA.Date

----------------------------------------------------------------------------------------------------
-- Data types
----------------------------------------------------------------------------------------------------

data DateRange = DateRange {drBegin : Date, drEnd : Date} deriving (Eq, Show)

type HolidaysKey = (Party, Party, Int)

timeOff : DateRange -> Int
timeOff DateRange{..} = subDate drEnd drBegin

template Request
  with
    employee : Party
    manager : Party
    dates : DateRange
    holidaysKey : HolidaysKey
  where
    signatory employee
    observer manager

template ApprovedHoliday
  with
    employee : Party
    manager : Party
    dates : DateRange
  where
    signatory manager
    observer employee

template RejectedHoliday
  with
    reason : Text
    manager : Party
  where
    signatory manager

template Holidays
  with
    holidays : Int
    employee : Party
    manager : Party
    year : Int
  where
    signatory manager
    signatory employee

    key (employee, manager, year) : HolidaysKey
    maintainer key._1
    maintainer key._2

----------------------------------------------------------------------------------------------------
-- Rules
----------------------------------------------------------------------------------------------------

template Handle
  with
    employee : Party
    manager : Party
  where
    signatory employee
    observer manager

    nonconsuming choice DoMakeRequest : ContractId Request
      with
        dates : DateRange
        holidaysKey : HolidaysKey
      controller employee
        do
          (_coid, Holidays{..}) <- fetchByKey holidaysKey
          assert $ (holidays - timeOff dates) >= 0
          create $ Request employee manager dates holidaysKey

    nonconsuming choice DoCreateHolidays : ContractId Holidays
      with
        days : Int
        year : Int
      controller manager
        do
          create $ Holidays days employee manager year

    nonconsuming choice DoApprove : ContractId ApprovedHoliday
      with
        request : ContractId Request
      controller manager
        do
          Request{..} <- fetch request
          (coid, _h) <- fetchByKey @Holidays holidaysKey
          exercise self $ DoTake coid (timeOff dates)
          archive request
          create $ ApprovedHoliday employee manager dates

    nonconsuming choice DoReject : ContractId RejectedHoliday
      with
        request : ContractId Request
        reason : Text
      controller manager
        do
          Request{..} <- fetch request
          archive request
          create $ RejectedHoliday reason manager

    nonconsuming choice DoTopUp : ContractId Holidays
      with
        holidaysCoid : ContractId Holidays
        amount : Int
      controller manager
          do
            h@Holidays{..} <- fetch holidaysCoid
            archive holidaysCoid
            create $ h {holidays = holidays + amount}


    nonconsuming choice DoTake : ContractId Holidays
      with
          holidaysCoid : ContractId Holidays
          amount : Int
        controller manager
          do
            h@Holidays{..} <- fetch holidaysCoid
            assert $ holidays >= amount
            archive holidaysCoid
            create $ h{holidays = holidays - amount}

----------------------------------------------------------------------------------------------------
-- Tests
----------------------------------------------------------------------------------------------------

test = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"
  charlie <- getParty "Charlie"

  hAlice <- submit alice $ create $ Handle alice bob
  hBob <- submit charlie $ create $ Handle charlie bob
  holidaysAlice <- submit bob $ exercise hAlice $ DoCreateHolidays 30 2019
  holidaysCharlie <- submit bob $ exercise hBob $ DoCreateHolidays 10 2019
  rAlice <- submit alice $ exercise hAlice $ DoMakeRequest (DateRange {drBegin = date 2019 Sep 20, drEnd = date 2019 Oct 8}) (alice, bob, 2019)
  -- submitMustFail charlie $ exercise hBob $ DoMakeRequest (DateRange {drBegin = date 2019 Oct 1,drEnd = date 2019 Oct 30}) (charlie, bob, 2019)
  submit bob $ exercise hAlice $ DoApprove rAlice
  -- submitMustFail alice $ exercise hAlice $ DoMakeRequest (DateRange {drBegin = date 2019 Oct 10, drEnd = date 2019 Oct 23}) (alice, bob, 2019)
